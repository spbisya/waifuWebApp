<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on Waifu Sim</title>
    <link>https://spbisya.github.io/waifuWebApp/tutorials/</link>
    <description>Recent content in Tutorials on Waifu Sim</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Jun 2016 11:56:38 +0300</lastBuildDate>
    <atom:link href="https://spbisya.github.io/waifuWebApp/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Api for Waifu Sim 0.1</title>
      <link>https://spbisya.github.io/waifuWebApp/tutorials/tutorial/</link>
      <pubDate>Mon, 20 Jun 2016 11:56:38 +0300</pubDate>
      
      <guid>https://spbisya.github.io/waifuWebApp/tutorials/tutorial/</guid>
      <description>&lt;p&gt;&lt;h2&gt;Setup:&lt;/h2&gt;
  Install Go, mySql, then&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  go get github.com/gin-gonic/gin
  go get github.com/go-sql-driver/mysql
  go get gopkg.in/gorp.v1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  git clone https://github.com/spbisya/waifuWebApp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy the project to $GOPATH/src/github.com/spbisya/waifuWebApp directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  go install github.com/spbisya/waifuWebApp &amp;amp;&amp;amp; waifuWebApp
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;UPDATE 06.16.2016&lt;/h3&gt;
  **All POST requests should be made with adding ?token=&lt;your token&gt; to path**

  **All DELETE requests can be only made with administrator token**
&lt;h3&gt;Features&lt;/h3&gt;

&lt;h5&gt;New features will be added below each update&lt;/h5&gt;

&lt;p&gt;Since the last update if user want to POST some data to the DB he should POST model&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User {login, password, email, waifu}&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;to &amp;ldquo;/register&amp;rdquo; path. Then he should remember the token and use it in future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Waifu Api allows you to control waifus on the server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Waifu model:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Id

- FirstName

- LastName

- Characters
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  curl -i http://localhost:8080/api/v1/waifus
  curl -i http://localhost:8080/api/v1/waifus/1
  curl -i -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -d &amp;quot;{ \&amp;quot;firstname\&amp;quot;: \&amp;quot;Malcolm\&amp;quot;, \&amp;quot;lastname\&amp;quot;: \&amp;quot;Merlin\&amp;quot;, \&amp;quot;characters\&amp;quot;: \&amp;quot;genka\&amp;quot; }&amp;quot; http://localhost:8080/api/v1/waifus
  curl -i -X PUT -H &amp;quot;Content-Type: application/json&amp;quot; -d &amp;quot;{ \&amp;quot;firstname\&amp;quot;: \&amp;quot;Thea\&amp;quot;, \&amp;quot;lastname\&amp;quot;: \&amp;quot;Merlyn\&amp;quot;, \&amp;quot;characters\&amp;quot;: \&amp;quot;yandere\&amp;quot; }&amp;quot; http://localhost:8080/api/v1/waifus/1
  curl -i -X DELETE http://localhost:8080/api/v1/waifus/1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;h5&gt; Get parts of the sentences&lt;/h5&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  curl -i http://localhost:8080/words?v=greetings
  curl -i http://localhost:8080/words?v=questions
  curl -i http://localhost:8080/words?v=accosts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Greetings, Accosts and Questions Apis allow you to control three same models:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Model&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- Id

- Characters

- Texts
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;  curl -i http://localhost:8080/api/greeting
  curl -i http://localhost:8080/api/greeting/yandere
  curl -i -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -d &amp;quot;{ \&amp;quot;characters\&amp;quot;: \&amp;quot;yandere\&amp;quot;, \&amp;quot;texts\&amp;quot;: \&amp;quot;Shalom \&amp;quot; }&amp;quot; http://localhost:8080/api/greeting/
  curl -i -X PUT -H &amp;quot;Content-Type: application/json&amp;quot; -d &amp;quot;{ \&amp;quot;characters\&amp;quot;: \&amp;quot;yandere\&amp;quot;, \&amp;quot;texts\&amp;quot;: \&amp;quot;hello\&amp;quot; }&amp;quot; http://localhost:8080/api/greeting/1
  curl -i -X DELETE http://localhost:8080/api/v1/greeting/1

  curl -i http://localhost:8080/api/accost
  curl -i http://localhost:8080/api/accost/yandere
  curl -i -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -d &amp;quot;{ \&amp;quot;characters\&amp;quot;: \&amp;quot;yandere\&amp;quot;, \&amp;quot;texts\&amp;quot;: \&amp;quot;baka\&amp;quot; }&amp;quot; http://localhost:8080/api/accost/
  curl -i -X PUT -H &amp;quot;Content-Type: application/json&amp;quot; -d &amp;quot;{ \&amp;quot;characters\&amp;quot;: \&amp;quot;yandere\&amp;quot;, \&amp;quot;texts\&amp;quot;: \&amp;quot;mother\&amp;quot; }&amp;quot; http://localhost:8080/api/accost/1
  curl -i -X DELETE http://localhost:8080/api/v1/accost/1

  curl -i http://localhost:8080/api/question
  curl -i http://localhost:8080/api/question/yandere
  curl -i -X POST -H &amp;quot;Content-Type: application/json&amp;quot; -d &amp;quot;{ \&amp;quot;characters\&amp;quot;: \&amp;quot;yandere\&amp;quot;, \&amp;quot;texts\&amp;quot;: \&amp;quot;who R u?\&amp;quot; }&amp;quot; http://localhost:8080/api/question/
  curl -i -X PUT -H &amp;quot;Content-Type: application/json&amp;quot; -d &amp;quot;{ \&amp;quot;characters\&amp;quot;: \&amp;quot;yandere\&amp;quot;, \&amp;quot;texts\&amp;quot;: \&amp;quot;how R U?\&amp;quot; }&amp;quot; http://localhost:8080/api/question/1
  curl -i -X DELETE http://localhost:8080/api/v1/question/1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Finally, you can create the sentence using 1 part from each model.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  curl -i http://localhost:8080/random
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>